server.port=1101
spring.application.name=api-gateway
eureka.client.serviceUrl.defaultZone=http://localhost:1001/eureka
##没有Eureka和Consul的服务治理框架帮助的时候，
##我们需要根据服务实例的数量采用不同方式的配置来实现路由规则：
##撇开 eureka 进行的 zuul 单独的路由配置 ---------start---------
#eureka.client.fetch-registry=false
#eureka.client.register-with-eureka=false
##ribbon.eureka.enabled ，Spring Cloud Zuul中自带了对Ribbon的依赖，
#ribbon.eureka.enabled=false

##单实例配置
#zuul.routes.user-service.path=/eureka-client/**
#zuul.routes.user-service.url=http://localhost:1201/

##多实例配置
#zuul.routes.user-service.path=/**
#zuul.routes.user-service.serviceId=user-service
#user-service.ribbon.listOfServers=http://localhost:1201/,http://localhost:1202/
## zuul.routes.user-service.path 和zuul.routes.user-service.serviceId 等价 zuul.routes.user-service=/user-service/**
#zuul.routes.user-service=/**
##撇开 eureka 进行的 Zuul 单独的路由配置 ---------end---------


# 在Spring Cloud Netflix中，Zuul巧妙的整合了Eureka来实现面向服务的路由。
# 实际上，我们可以直接将API网关也看做是Eureka服务治理下的一个普通微服务应用。
# 它除了会将自己注册到Eureka服务注册中心上之外，也会从注册中心获取所有服务以及它们的实例清单。
# 所以，在Eureka的帮助下，API网关服务本身就已经维护了系统中所有serviceId与实例地址的映射关系。
# 当有外部请求到达API网关的时候，根据请求的URL路径找到最佳匹配的path规则，API网关就可以知道要将该请求路由到哪个具体的serviceId上去。
# 由于在API网关中已经知道serviceId对应服务实例的地址清单，那么只需要通过Ribbon的负载均衡策略，
# 直接在这些清单中选择一个具体的实例进行转发就能完成路由工作了。